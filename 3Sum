class Solution(object):
    def threeSum(self, nums):
        
        #Sort list of nums
        triplets = []
        nums.sort()

        #Create pointers for current value, first value and last value
        val = 0
        while val < len(nums) - 2:
            first = val + 1
            last = len(nums) - 1
            current_val = nums[val]

            # Move first pointer right if sum is less than 0 and last if sum is greater than 0
            while last > first:
                first_val = nums[first]
                last_val = nums[last]
                if current_val + first_val +  last_val < 0:
                    first += 1
                elif current_val + first_val +  last_val > 0:
                    last -= 1
                else:
                    if current_val + first_val + last_val == 0 and [current_val,first_val,last_val] not in triplets:
                        triplets.append([current_val,first_val,last_val])
                    first += 1
                    last -= 1
            val += 1
        return triplets





Question from Leekcode:

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
